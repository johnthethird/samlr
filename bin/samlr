#!/usr/bin/env ruby

require "samlr"
require "samlr/version"
require "samlr/command"

require "optparse"

ARGV << "--help" if ARGV.empty?

options = {}
OptionParser.new do |opt|
  opt.banner = <<-EOS
SAML response command line tool.

Usage examples:
  samlr --verify --fingerprint ab:23:cd --skip-conditions <response.xml|directory of responses>
  samlr --verify --certificate <x509_certificate.crt> --skip-conditions <response.xml|directory of responses>
  samlr --verify --skip-fingerprint --skip-conditions <response.xml|directory of responses>
  samlr --schema-validate response.xml
  samlr --print response.xml[.base64]

Try it with the gem examples:
  ruby -Ilib bin/samlr -v -s -f 44:D2:9D:98:49:66:27:30:3A:67:A2:5D:97:62:31:65:57:9F:57:D1 test/fixtures/sample_response.xml
  ruby -Ilib bin/samlr -v -s -c test/fixtures/default_samlr_certificate.pem                 test/fixtures/no_cert_response.xml

Full list of options:
EOS

  opt.on("-v", "--verify", "Verify a SAML response document") { options[:verify] = true }
  opt.on("-f", "--fingerprint FINGERPRINT", "The fingerprint to verify the certificate against") { |c| options[:fingerprint] = c }
  opt.on("-c", "--certificate FILE", "A certificate (PEM or DER) to validate the signature against (assuming no certificate embedded in the response)") { |c| options[:certificate] = File.open(c) }
  opt.on("--skip-conditions", "Skip conditions check") { options[:skip_conditions] = true }
  opt.on("--skip-validation", "Skip schema validation rejection") { options[:skip_validation] = true }
  opt.on("--skip-fingerprint", "Skip certificate fingerprint check") { options[:skip_fingerprint] = true }
  opt.on("--verbose", "Log to STDOUT") { options[:verbose] = true }
  opt.on("--schema-validate", "Perform a schema validation against the input") { options[:schema_validate] = true }
  opt.on("--print", "Pretty prints the XML") { options[:print] = true }
  opt.on("-h", "--help", "Show this.") { puts opt; exit }
  opt.on("--version", "Show Version"){ puts Samlr::VERSION; exit}
end.parse!

if ARGV.empty? || !File.exist?(ARGV[0])
  puts "Input file not given or does not exist"
  exit 1
end

options[:certificate] &&= options[:certificate].read

puts Samlr::Command.execute(options, ARGV[0])
